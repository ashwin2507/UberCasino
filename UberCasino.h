//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: UberCasino.h
//  Source: idl/UberCasino.idl
//  Generated: Sat Apr 28 23:10:28 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _UBERCASINO_H_
#define _UBERCASINO_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"


namespace UberCasino
{
   struct card_t;
   struct Player;
   struct Dealer;
   struct PlayerState;
   struct Game;
   const DDS::Long SIZE_OF_UUID = (DDS::Long) 16L;
   const DDS::Long MAX_PLAYERS_IN_A_GAME = (DDS::Long) 7L;
   const DDS::Long MAX_CARDS_PER_PLAYER = (DDS::Long) 10L;
   enum suite_t
   {
      hearts,
      diamonds,
      clubs,
      spades
   };
   enum card_kind
   {
      ace,
      two,
      three,
      four,
      five,
      six,
      seven,
      eight,
      nine,
      ten,
      jack,
      queen,
      king
   };

   struct card_t
   {
         card_kind card;
         suite_t suite;
         DDS::Boolean valid;
   };

   typedef DDS_DCPSStruct_var < card_t> card_t_var;
   typedef card_t&card_t_out;
   enum player_action_t
   {
      idle,
      hitting,
      standing,
      splitting,
      doubling
   };

   struct Player
   {
         typedef DDS::Char _uid_slice;
         typedef DDS::Char _uid[16];
         typedef _uid _uid_out;
         static _uid_slice * _uid_alloc ();
         static void _uid_free (_uid_slice *);
         static void _uid_copy (_uid_slice* to, const _uid_slice* from);
         static _uid_slice *_uid_dup (const _uid_slice* from);

         struct _uid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _uid, _uid_slice, struct _uid_uniq_> _uid_var;
         typedef DDS_DCPS_Array_forany< _uid, _uid_slice, struct _uid_uniq_> _uid_forany;
         typedef DDS::Char _game_uid_slice;
         typedef DDS::Char _game_uid[16];
         typedef _game_uid _game_uid_out;
         static _game_uid_slice * _game_uid_alloc ();
         static void _game_uid_free (_game_uid_slice *);
         static void _game_uid_copy (_game_uid_slice* to, const _game_uid_slice* from);
         static _game_uid_slice *_game_uid_dup (const _game_uid_slice* from);

         struct _game_uid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _game_uid, _game_uid_slice, struct _game_uid_uniq_> _game_uid_var;
         typedef DDS_DCPS_Array_forany< _game_uid, _game_uid_slice, struct _game_uid_uniq_> _game_uid_forany;
         typedef DDS::Char _name_slice;
         typedef DDS::Char _name[32];
         typedef _name _name_out;
         static _name_slice * _name_alloc ();
         static void _name_free (_name_slice *);
         static void _name_copy (_name_slice* to, const _name_slice* from);
         static _name_slice *_name_dup (const _name_slice* from);

         struct _name_uniq_ {};
         typedef DDS_DCPS_FArray_var< _name, _name_slice, struct _name_uniq_> _name_var;
         typedef DDS_DCPS_Array_forany< _name, _name_slice, struct _name_uniq_> _name_forany;
         DDS::Long count;
         _uid uid;
         _game_uid game_uid;
         _name name;
         DDS::Float balance;
         player_action_t A;
   };

   typedef DDS_DCPSStruct_var < Player> Player_var;
   typedef Player&Player_out;
   enum game_state
   {
      waiting_to_join,
      waiting,
      playing,
      end_hand
   };

   struct Dealer
   {
         typedef DDS::Char _uid_slice;
         typedef DDS::Char _uid[16];
         typedef _uid _uid_out;
         static _uid_slice * _uid_alloc ();
         static void _uid_free (_uid_slice *);
         static void _uid_copy (_uid_slice* to, const _uid_slice* from);
         static _uid_slice *_uid_dup (const _uid_slice* from);

         struct _uid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _uid, _uid_slice, struct _uid_uniq_> _uid_var;
         typedef DDS_DCPS_Array_forany< _uid, _uid_slice, struct _uid_uniq_> _uid_forany;
         typedef DDS::Char _name_slice;
         typedef DDS::Char _name[32];
         typedef _name _name_out;
         static _name_slice * _name_alloc ();
         static void _name_free (_name_slice *);
         static void _name_copy (_name_slice* to, const _name_slice* from);
         static _name_slice *_name_dup (const _name_slice* from);

         struct _name_uniq_ {};
         typedef DDS_DCPS_FArray_var< _name, _name_slice, struct _name_uniq_> _name_var;
         typedef DDS_DCPS_Array_forany< _name, _name_slice, struct _name_uniq_> _name_forany;
         typedef DDS::Char _game_uid_slice;
         typedef DDS::Char _game_uid[16];
         typedef _game_uid _game_uid_out;
         static _game_uid_slice * _game_uid_alloc ();
         static void _game_uid_free (_game_uid_slice *);
         static void _game_uid_copy (_game_uid_slice* to, const _game_uid_slice* from);
         static _game_uid_slice *_game_uid_dup (const _game_uid_slice* from);

         struct _game_uid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _game_uid, _game_uid_slice, struct _game_uid_uniq_> _game_uid_var;
         typedef DDS_DCPS_Array_forany< _game_uid, _game_uid_slice, struct _game_uid_uniq_> _game_uid_forany;
         _uid uid;
         _name name;
         _game_uid game_uid;
   };

   typedef DDS_DCPSStruct_var < Dealer> Dealer_var;
   typedef Dealer&Dealer_out;

   struct PlayerState
   {
         typedef DDS::Char _uid_slice;
         typedef DDS::Char _uid[16];
         typedef _uid _uid_out;
         static _uid_slice * _uid_alloc ();
         static void _uid_free (_uid_slice *);
         static void _uid_copy (_uid_slice* to, const _uid_slice* from);
         static _uid_slice *_uid_dup (const _uid_slice* from);

         struct _uid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _uid, _uid_slice, struct _uid_uniq_> _uid_var;
         typedef DDS_DCPS_Array_forany< _uid, _uid_slice, struct _uid_uniq_> _uid_forany;
         typedef UberCasino::card_t _cards_slice;
         typedef UberCasino::card_t _cards[10];
         typedef _cards _cards_out;
         static _cards_slice * _cards_alloc ();
         static void _cards_free (_cards_slice *);
         static void _cards_copy (_cards_slice* to, const _cards_slice* from);
         static _cards_slice *_cards_dup (const _cards_slice* from);

         struct _cards_uniq_ {};
         typedef DDS_DCPS_FArray_var< _cards, _cards_slice, struct _cards_uniq_> _cards_var;
         typedef DDS_DCPS_Array_forany< _cards, _cards_slice, struct _cards_uniq_> _cards_forany;
         _uid uid;
         _cards cards;
   };

   typedef DDS_DCPSStruct_var < PlayerState> PlayerState_var;
   typedef PlayerState&PlayerState_out;

   struct Game
   {
         typedef DDS::Char _game_uid_slice;
         typedef DDS::Char _game_uid[16];
         typedef _game_uid _game_uid_out;
         static _game_uid_slice * _game_uid_alloc ();
         static void _game_uid_free (_game_uid_slice *);
         static void _game_uid_copy (_game_uid_slice* to, const _game_uid_slice* from);
         static _game_uid_slice *_game_uid_dup (const _game_uid_slice* from);

         struct _game_uid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _game_uid, _game_uid_slice, struct _game_uid_uniq_> _game_uid_var;
         typedef DDS_DCPS_Array_forany< _game_uid, _game_uid_slice, struct _game_uid_uniq_> _game_uid_forany;
         typedef DDS::Char _dealer_uid_slice;
         typedef DDS::Char _dealer_uid[16];
         typedef _dealer_uid _dealer_uid_out;
         static _dealer_uid_slice * _dealer_uid_alloc ();
         static void _dealer_uid_free (_dealer_uid_slice *);
         static void _dealer_uid_copy (_dealer_uid_slice* to, const _dealer_uid_slice* from);
         static _dealer_uid_slice *_dealer_uid_dup (const _dealer_uid_slice* from);

         struct _dealer_uid_uniq_ {};
         typedef DDS_DCPS_FArray_var< _dealer_uid, _dealer_uid_slice, struct _dealer_uid_uniq_> _dealer_uid_var;
         typedef DDS_DCPS_Array_forany< _dealer_uid, _dealer_uid_slice, struct _dealer_uid_uniq_> _dealer_uid_forany;
         typedef UberCasino::PlayerState _p_slice;
         typedef UberCasino::PlayerState _p[7];
         typedef _p _p_out;
         static _p_slice * _p_alloc ();
         static void _p_free (_p_slice *);
         static void _p_copy (_p_slice* to, const _p_slice* from);
         static _p_slice *_p_dup (const _p_slice* from);

         struct _p_uniq_ {};
         typedef DDS_DCPS_FArray_var< _p, _p_slice, struct _p_uniq_> _p_var;
         typedef DDS_DCPS_Array_forany< _p, _p_slice, struct _p_uniq_> _p_forany;
         typedef UberCasino::card_t _dealer_cards_slice;
         typedef UberCasino::card_t _dealer_cards[10];
         typedef _dealer_cards _dealer_cards_out;
         static _dealer_cards_slice * _dealer_cards_alloc ();
         static void _dealer_cards_free (_dealer_cards_slice *);
         static void _dealer_cards_copy (_dealer_cards_slice* to, const _dealer_cards_slice* from);
         static _dealer_cards_slice *_dealer_cards_dup (const _dealer_cards_slice* from);

         struct _dealer_cards_uniq_ {};
         typedef DDS_DCPS_FArray_var< _dealer_cards, _dealer_cards_slice, struct _dealer_cards_uniq_> _dealer_cards_var;
         typedef DDS_DCPS_Array_forany< _dealer_cards, _dealer_cards_slice, struct _dealer_cards_uniq_> _dealer_cards_forany;
         game_state gstate;
         _game_uid game_uid;
         _dealer_uid dealer_uid;
         _p p;
         _dealer_cards dealer_cards;
         DDS::Long active_player;
   };

   typedef DDS_DCPSStruct_var < Game> Game_var;
   typedef Game&Game_out;
}
template <>
UberCasino::Player::_uid_slice* DDS_DCPS_ArrayHelper < UberCasino::Player::_uid, UberCasino::Player::_uid_slice, UberCasino::Player::_uid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Player::_uid, UberCasino::Player::_uid_slice, UberCasino::Player::_uid_uniq_>::copy (UberCasino::Player::_uid_slice *to, const UberCasino::Player::_uid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Player::_uid, UberCasino::Player::_uid_slice, UberCasino::Player::_uid_uniq_>::free (UberCasino::Player::_uid_slice *ptr);
template <>
UberCasino::Player::_game_uid_slice* DDS_DCPS_ArrayHelper < UberCasino::Player::_game_uid, UberCasino::Player::_game_uid_slice, UberCasino::Player::_game_uid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Player::_game_uid, UberCasino::Player::_game_uid_slice, UberCasino::Player::_game_uid_uniq_>::copy (UberCasino::Player::_game_uid_slice *to, const UberCasino::Player::_game_uid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Player::_game_uid, UberCasino::Player::_game_uid_slice, UberCasino::Player::_game_uid_uniq_>::free (UberCasino::Player::_game_uid_slice *ptr);
template <>
UberCasino::Player::_name_slice* DDS_DCPS_ArrayHelper < UberCasino::Player::_name, UberCasino::Player::_name_slice, UberCasino::Player::_name_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Player::_name, UberCasino::Player::_name_slice, UberCasino::Player::_name_uniq_>::copy (UberCasino::Player::_name_slice *to, const UberCasino::Player::_name_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Player::_name, UberCasino::Player::_name_slice, UberCasino::Player::_name_uniq_>::free (UberCasino::Player::_name_slice *ptr);
template <>
UberCasino::Dealer::_uid_slice* DDS_DCPS_ArrayHelper < UberCasino::Dealer::_uid, UberCasino::Dealer::_uid_slice, UberCasino::Dealer::_uid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Dealer::_uid, UberCasino::Dealer::_uid_slice, UberCasino::Dealer::_uid_uniq_>::copy (UberCasino::Dealer::_uid_slice *to, const UberCasino::Dealer::_uid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Dealer::_uid, UberCasino::Dealer::_uid_slice, UberCasino::Dealer::_uid_uniq_>::free (UberCasino::Dealer::_uid_slice *ptr);
template <>
UberCasino::Dealer::_name_slice* DDS_DCPS_ArrayHelper < UberCasino::Dealer::_name, UberCasino::Dealer::_name_slice, UberCasino::Dealer::_name_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Dealer::_name, UberCasino::Dealer::_name_slice, UberCasino::Dealer::_name_uniq_>::copy (UberCasino::Dealer::_name_slice *to, const UberCasino::Dealer::_name_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Dealer::_name, UberCasino::Dealer::_name_slice, UberCasino::Dealer::_name_uniq_>::free (UberCasino::Dealer::_name_slice *ptr);
template <>
UberCasino::Dealer::_game_uid_slice* DDS_DCPS_ArrayHelper < UberCasino::Dealer::_game_uid, UberCasino::Dealer::_game_uid_slice, UberCasino::Dealer::_game_uid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Dealer::_game_uid, UberCasino::Dealer::_game_uid_slice, UberCasino::Dealer::_game_uid_uniq_>::copy (UberCasino::Dealer::_game_uid_slice *to, const UberCasino::Dealer::_game_uid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Dealer::_game_uid, UberCasino::Dealer::_game_uid_slice, UberCasino::Dealer::_game_uid_uniq_>::free (UberCasino::Dealer::_game_uid_slice *ptr);
template <>
UberCasino::PlayerState::_uid_slice* DDS_DCPS_ArrayHelper < UberCasino::PlayerState::_uid, UberCasino::PlayerState::_uid_slice, UberCasino::PlayerState::_uid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::PlayerState::_uid, UberCasino::PlayerState::_uid_slice, UberCasino::PlayerState::_uid_uniq_>::copy (UberCasino::PlayerState::_uid_slice *to, const UberCasino::PlayerState::_uid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::PlayerState::_uid, UberCasino::PlayerState::_uid_slice, UberCasino::PlayerState::_uid_uniq_>::free (UberCasino::PlayerState::_uid_slice *ptr);
template <>
UberCasino::PlayerState::_cards_slice* DDS_DCPS_ArrayHelper < UberCasino::PlayerState::_cards, UberCasino::PlayerState::_cards_slice, UberCasino::PlayerState::_cards_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::PlayerState::_cards, UberCasino::PlayerState::_cards_slice, UberCasino::PlayerState::_cards_uniq_>::copy (UberCasino::PlayerState::_cards_slice *to, const UberCasino::PlayerState::_cards_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::PlayerState::_cards, UberCasino::PlayerState::_cards_slice, UberCasino::PlayerState::_cards_uniq_>::free (UberCasino::PlayerState::_cards_slice *ptr);
template <>
UberCasino::Game::_game_uid_slice* DDS_DCPS_ArrayHelper < UberCasino::Game::_game_uid, UberCasino::Game::_game_uid_slice, UberCasino::Game::_game_uid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Game::_game_uid, UberCasino::Game::_game_uid_slice, UberCasino::Game::_game_uid_uniq_>::copy (UberCasino::Game::_game_uid_slice *to, const UberCasino::Game::_game_uid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Game::_game_uid, UberCasino::Game::_game_uid_slice, UberCasino::Game::_game_uid_uniq_>::free (UberCasino::Game::_game_uid_slice *ptr);
template <>
UberCasino::Game::_dealer_uid_slice* DDS_DCPS_ArrayHelper < UberCasino::Game::_dealer_uid, UberCasino::Game::_dealer_uid_slice, UberCasino::Game::_dealer_uid_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Game::_dealer_uid, UberCasino::Game::_dealer_uid_slice, UberCasino::Game::_dealer_uid_uniq_>::copy (UberCasino::Game::_dealer_uid_slice *to, const UberCasino::Game::_dealer_uid_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Game::_dealer_uid, UberCasino::Game::_dealer_uid_slice, UberCasino::Game::_dealer_uid_uniq_>::free (UberCasino::Game::_dealer_uid_slice *ptr);
template <>
UberCasino::Game::_p_slice* DDS_DCPS_ArrayHelper < UberCasino::Game::_p, UberCasino::Game::_p_slice, UberCasino::Game::_p_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Game::_p, UberCasino::Game::_p_slice, UberCasino::Game::_p_uniq_>::copy (UberCasino::Game::_p_slice *to, const UberCasino::Game::_p_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Game::_p, UberCasino::Game::_p_slice, UberCasino::Game::_p_uniq_>::free (UberCasino::Game::_p_slice *ptr);
template <>
UberCasino::Game::_dealer_cards_slice* DDS_DCPS_ArrayHelper < UberCasino::Game::_dealer_cards, UberCasino::Game::_dealer_cards_slice, UberCasino::Game::_dealer_cards_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Game::_dealer_cards, UberCasino::Game::_dealer_cards_slice, UberCasino::Game::_dealer_cards_uniq_>::copy (UberCasino::Game::_dealer_cards_slice *to, const UberCasino::Game::_dealer_cards_slice* from);
template <>
void DDS_DCPS_ArrayHelper < UberCasino::Game::_dealer_cards, UberCasino::Game::_dealer_cards_slice, UberCasino::Game::_dealer_cards_uniq_>::free (UberCasino::Game::_dealer_cards_slice *ptr);




#endif 
